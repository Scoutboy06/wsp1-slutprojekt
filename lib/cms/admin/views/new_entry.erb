<div x-data="formHandler" class="px-4 py-4">
  <a
    href="<%= request.path_info.split("/")[...-1].join("/") %>"
    class="flex items-center gap-1 px-2 py-1 border border-black cursor-pointer w-min hover:bg-black hover:text-white"
  >
    <i class="icon">arrow_back</i>
    <span>Back</span>
  </a>

  <form
    id="create-form"
    action="/admin/collections/<%= @setting.slug %>"
    enctype="multipart/form-data"
    method="POST"
    class="flex flex-col gap-8 mt-8"
  >  
    <% @setting.fields.each do |field| %>
      <% if field.type == "string" %>
        <div class="flex flex-col gap-2">
          <label for="<%= field.name %>">
            <%= field.name %>
            <% if field.required %>
              <span class="text-red-600 ">*</span>
            <% end %>
          </label>
          <input
            type="text"
            name="<%= field.name %>"
            id="<%= field.name %>"
            class="px-2 py-1 border border-black"
            <%= field.required ? "required" : '' %>
          >
        </div>
      <% elsif field.type == "boolean" %>
        <div class="flex items-center gap-2">
          <input
            type="checkbox"
            name="<%= field.name %>"
            id="<%= field.name %>"
            class="border border-black"
          >
          <label for="<%= field.name %>"><%= field.name %></label>
        </div>
      <% elsif field.type == "email" %>
        <div class="flex flex-col gap-2">
          <label for="<%= field.name %>">
            <%= field.name %>
            <% if field.required %>
              <span class="text-red-600 ">*</span>
            <% end %>
          </label>
          <input
            type="email"
            name="<%= field.name %>"
            id="<%= field.name %>"
            class="px-2 py-1 border border-black"
            <%= field.required ? "required" : '' %>
          >
        </div>
      <% elsif field.type == "password" %>
        <div class="flex flex-col gap-2">
          <label for="<%= field.name %>">
            <%= field.name %>
            <% if field.required %>
              <span class="text-red-600 ">*</span>
            <% end %>
          </label>
          <input
            type="password"
            name="<%= field.name %>"
            id="<%= field.name %>"
            class="px-2 py-1 border border-black"
            <%= field.required ? "required" : '' %>
          >
        </div>
      <% elsif field.type == "upload" %>
        <div class="flex flex-col gap-2">
          <label for="<%= field.name %>">
            <%= field.name %>
            <% if field.required %>
              <span class="text-red-600">*</span>
            <% end%>
          </label>
          <div class="px-4 py-4 border border-black">
            <input
              type="file"
              name="<%= field.name %>"
              accept="image/*"
              @change="handleFileUpload($event, '<%= field.name %>')"
            >
            <template x-if="filePreviews['<%= field.name %>']">
              <div class="relative p-2 mt-2 border">
                <img :src="filePreviews['<%= field.name %>'].preview" class="w-auto h-20">
                <p x-text="filePreviews['<%= field.name %>'].name"></p>
                <p x-text="filePreviews['<%= field.name %>'].size"></p>
                <p x-text="filePreviews['<%= field.name %>'].dimensions"></p>
                <button type="button" @click="removeFile('<%= field.name %>')" class="icon">delete</button>
              </div>
            </template>
          </div>
        </div>
      <% end %>
    <% end %>

    <button
      type="submit"
      class="py-2 border border-black cursor-pointer hover:bg-black hover:text-white"
    >Create</button>
  </form>
</div>

<script>
document.addEventListener('alpine:init', () => {
  Alpine.data('formHandler', () => ({
    filePreviews: {},

    handleFileUpload(e, fieldName) {
      const file = e.target.files[0];
      if(!file || !file.type.startsWith('image/')) return;

      const reader = new FileReader();

      reader.onload = (e) => {
        const img = new Image();
        img.src = e.target.result;

        img.onload = () => {
          this.filePreviews[fieldName] = {
            name: file.name,
            size: (file.size / 1024).toFixed(2) + ' KB',
            dimensions: `${img.width} x ${img.height}`,
            preview: e.target.result,
          };
        }
      }

      reader.readAsDataURL(file);
    },

    removeFile(fieldName) {
      delete this.filePreviews[fieldName];
    },
  }))
})
</script>
